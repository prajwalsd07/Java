package com.demo.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import com.demo.entity.Employee;
import com.demo.exceptions.EmployeeExistsException;
import com.demo.exceptions.EmployeeNotFoundException;

public class EmployeeDaoJdbcImpl implements EmployeeDao {

	@Override
	public Employee findById(Integer id) throws EmployeeNotFoundException {
		Connection conn;
		try {
			conn  = getConnection();
			PreparedStatement pst = conn.prepareStatement("select * from employee where empno=?");
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();

			if (rs.next()) {
				Employee emp = new Employee(rs.getInt("EMPNO"), rs.getString("NAME"), rs.getString("ADDRESS"),
						rs.getDouble("SALARY"));
				return emp;
			} else {
				throw new EmployeeNotFoundException();
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} catch (EmployeeNotFoundException e) {
			throw e;
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

	@Override
	public String save(Employee e) throws EmployeeExistsException {
		Connection conn = null;
		try {
			conn = getConnection();
			try {
				Employee e1 = findById(e.getEmpId());
				throw new EmployeeExistsException();
			} catch (EmployeeNotFoundException e1) {
				PreparedStatement pst = conn
						.prepareStatement("insert into employee(empno,name,address,salary) values (?,?,?,?)");
				pst.setInt(1, e.getEmpId());
				pst.setString(2, e.getName());
				pst.setString(3, e.getCity());
				pst.setDouble(4, e.getSalary());
				pst.executeUpdate();
				return "Employee saved";
			}

		} catch (SQLException e1) {
			e1.printStackTrace();
			throw new RuntimeException();
		} catch (EmployeeExistsException e2) {
			throw e2;
		} finally {
			try {
				conn.close();
			} catch (SQLException e3) {
				e3.printStackTrace();
			}
		}
	}

	@Override
	public String delete(Integer id) throws EmployeeNotFoundException {
		
		Connection conn = null;
		try {
		conn = getConnection();
		try {
		Employee emp = findById(id);

		PreparedStatement pst = conn.prepareStatement("delete from employee where empno=?");
		pst.setInt(1, id);
		int row = pst.executeUpdate();
		return "Employee Deleted ";

		} catch (EmployeeNotFoundException e) {
		throw new EmployeeNotFoundException();
		}

		} catch (SQLException sql) {
		sql.printStackTrace();
		throw new RuntimeException();
		} finally {
		try {
		conn.close();
		} catch (SQLException sql) {
		sql.printStackTrace();
		}

		}
}

	@Override
	public String update(Employee e) throws EmployeeNotFoundException {
		Connection conn = null;
		try {
			conn = getConnection();
			Employee employee = findById(e.getEmpId());
			PreparedStatement pst = conn
					.prepareStatement("UPDATE employee SET name = ?, address=?, salary=? where empno = ?");
			// pst.setInt(1, e.getEmpId());
			pst.setString(1, employee.getName());
			pst.setString(2, employee.getCity());
			pst.setDouble(3, employee.getSalary());
			pst.setInt(4, employee.getEmpId());
			pst.executeUpdate();
			return "Updated Employee";
			// pst.executeUpdate();
		} catch (SQLException e1) {
			e1.printStackTrace();
			throw new RuntimeException(e1);
		} catch (EmployeeNotFoundException e2) {
			throw e2;
		} finally {
			try {
				conn.close();
			} catch (SQLException e3) {
				e3.printStackTrace();
			}
		}
	}

	@Override
	public List<Employee> findAll() {
		Connection conn = null;
		List<Employee> employees = new ArrayList<>();
		try {
			conn = getConnection();
			PreparedStatement pst = conn.prepareStatement("select * from employee");
			ResultSet res = pst.executeQuery();
			while (res.next()) {
				int id = res.getInt("EMPNO");
				String name = res.getString("NAME");
				String city = res.getString("ADDRESS");
				double salary = res.getDouble("SALARY");
				employees.add(new Employee(id, name, city, salary));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return employees;
	}

	public Connection getConnection() throws SQLException {
		final String JDBC_URL = "jdbc:mariadb://localhost:3306/sapientdb";
		try {
			Class.forName("org.mariadb.jdbc.Driver");
			Connection conn = DriverManager.getConnection(JDBC_URL, "root", "root");
			return conn;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new SQLException("Connection cannot be created");
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		}

	}

}
